#labels Featured,Phase-Deploy,Phase-Requirements
http://r-vex.googlecode.com/svn/wiki/img/r-vex_logo_300.png

=Quickstart Guide for XUP V2P FPGA Board=

This is a quickstart guide to easily deploy ρ-VEX, mainly focused on the utilization
with a Xilinx University Program Virtex-II Pro FPGA board by Digilent. If
you want to use this guide together with another FPGA platform, you should first add
the definitions of your board to the workflow as described later.

==Requirements==
  * A [http://www.digilentinc.com/Products/Detail.cfm?av1=Products&Nav2=Programmable&Prod=XUPV2P Xilinx University Program Virtex-II Pro board]
  * PC running Linux or Windows^1^
  * Xilinx ISE Suite (tested with 8.1.03i, should work with later versions too)

^1^ When you want to make use of the Makefile method described below on a Windows machine, a Cygwin installation should be present with GNU Make. Xilinx EDK automatically installs a version of Cygwin. However, some GNU tools like `cat` are not included. This results in an error while bundling the log files after synthesis. This can be safely ignored.

==Quickstart==
  # Acquire the latest snapshot from the Downloads section at the ρ-VEX website, or checkout the latest code from the Subversion repository.
  # Inside the r-VEX/src/ directory, synthesize ρ-VEX by entering the following command:
{{{
make v2p
}}}
  # After the synthesis process has completed, the generated bit-file can be uploaded to the FPGA board by entering:
{{{
make fpga
}}}
  # Connect a serial cable to the RS-232 interface on the XUP V2P board. Connect the other side of the cable to a PC, and start a terminal application, like Minicom (Linux), Putty or Hyperterminal (Windows). Connect using the following settings: _115200 bps transfer rate, 8 data bits, no parity_
  # Press button SW2 on the XUP V2P board, which acts as the reset button. In the terminal application, you will see the contents of the first 16 data memory addresses, as well as a cycle counter.

By default, an application to calculate the 45th Fibonacci number is loaded and pre-synthesized. The VEX assembly source file of the default application can be found in the [http://code.google.com/p/r-vex/source/browse/trunk/demos/fibonacci.s demos/] directory. The output of ρ-VEX transmitted over the UART is the following:

{{{
r-VEX
-----
Cycles: 0x00000231

Data memory dump

addr | contents
-----+-----------
0x00 | 0x43A53F82
0x01 | 0x00000000
0x02 | 0x00000000
0x03 | 0x00000000
0x04 | 0x00000000
0x05 | 0x00000000
0x06 | 0x00000000
0x07 | 0x00000000
0x08 | 0x00000000
0x09 | 0x00000000
0x0A | 0x00000000
0x0B | 0x00000000
0x0C | 0x00000000
0x0D | 0x00000000
0x0E | 0x00000000
0x0F | 0x00000000
}}}

==Assembling and Running Other Code==

The instruction memory ROM can be found in the file [http://code.google.com/p/r-vex/source/browse/trunk/r-VEX/src/i_mem.vhd i_mem.vhd]. A new instruction ROM file can be generated by the ρ-ASM tool. This tool requires a UNIX operating system with the GNU C libraries.



